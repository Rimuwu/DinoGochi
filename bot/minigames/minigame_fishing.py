from bot.modules.inline import list_to_inline
from aiogram import types
from bot.modules.logs import log
from bot.minigames.minigame import MiniGame
from typing import Any


def search_in_radius(matrix: list, r: int, c: int, search: Any, R: int):
    """
    –ò—â–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Ç—Ä–∏—Ü–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞.
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    matrix (list of list of int): –ú–∞—Ç—Ä–∏—Ü–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫.
    r (int): –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏, –æ—Ç–∫—É–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫.
    c (int): –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞, –æ—Ç–∫—É–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫.
    search (int): –ó–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏.
    R (int): –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞. (>1)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    list of tuple: –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—Å—Ç—Ä–æ–∫–∞, —Å—Ç–æ–ª–±–µ—Ü), –≥–¥–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ.
    """
    rows = len(matrix)
    cols = len(matrix[0]) 
    result = []

    for i in range(max(0, r - R), min(rows, r + R + 1)):
        for j in range(max(0, c - R), min(cols, c + R + 1)):
            if matrix[i][j] == search:
                result.append((i, j))

    return result

class FishingGame(MiniGame):

    # ======== CREATE ======== #
    """ –ö–æ–≥–¥–∞ –æ–±—Ö–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞–Ω """

    def initialization(self):
        self.GAME_ID = 'FishingGame'

        self.score = 0
        self.stage = 'choose_area'
        self.area = [
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ]
        
        self.fishing_emoji = 'üêü' # data - 1
        self.predator_emoji = 'ü¶à' # data - 2
        self.rock_emoji = 'ü™®' # data - 3
        self.grass_emoji = 'üåø' # data - 4
        
        

        self.ButtonsRegister = {
            "button1": 'button'
        }

    # ======== MARKUP ======== #
    """ –ö–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é """

    async def MarkupGenerator(self):
        """ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é """

        return list_to_inline(
            [
                {'button': self.CallbackGenerator('button1')}
            ]
        )

    # ======== MESSAGE ======== #
    """ –ö–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—â–µ–Ω–∏—è –∏ –º–µ–Ω—é """

    async def MessageGenerator(self, end=False) -> None:
        """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ """
        if not end:
            text = f'Score {self.score} - max {self.max_score}'
            markup = await self.MarkupGenerator()
        else:
            text = 'Game WIN!'
            markup = None

        await self.MesageUpdate(text=text, reply_markup=markup)

    # ======== LOGIC ======== #
    """ –õ–æ–≥–∏–∫–∞ –º–∏–Ω–∏–∏–≥—Ä—ã """
    
    

    # ======== BUTTONS ======== #
    """ –§—É–Ω–∫—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ """

    async def button(self, callback: types.CallbackQuery):
        """ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ """



FishingGame().RegistryMe() # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
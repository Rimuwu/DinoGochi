

import random
import time

from bot.modules.inline import list_to_inline
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from bot.minigames.minigame import MiniGame
from typing import Any
from bot.modules.user import user
from bot.exec import bot

from bot.modules.user.user import User, take_coins, user_name
from bot.modules.dinosaur.dinosaur import Dino

class PowerChecker(MiniGame):

    # ======== CREATE ======== #
    """ –ö–æ–≥–¥–∞ –æ–±—Ö–µ–∫—Ç –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞–Ω """

    def get_GAME_ID(self): return 'PowerChecker'
    
    def edit_settings(self):
        pass
        # self.LOAD_DIRECTORIES = ['powerchecker.buttons']

    async def initialization(self, only_for: int = 0):

        self.DEBUG_MODE = True
        self.time_wait = 600

        self.only_for: int = only_for # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        self.opponent: int = 0
        # self.activ_user: int = self.user_id

        self.bet: int = 0 # —Å—Ç–∞–≤–∫–∞ (–µ—Å–ª–∏ –Ω–µ –¥–æ–∏–≥—Ä–∞–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º)

        """ preparation - –≤—ã–±–æ—Ä –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –∞–≤—Ç–æ—Ä–∞ –∏ —Å—Ç–∞–≤–∫–∏
            friend_wait - –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            wait_start - –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –¥–≤–æ–π–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            game - –∏–≥—Ä–∞ 
            end_game - –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
            
        """
        self.stage: str = '' 

        self.users = {
            'main': {
                'dinosaur': None,
                'tree_trunk': None,
                'name': ''
            },
            'opponent': {
                'dinosaur': None,
                'tree_trunk': None,
                'name': ''
            }
        }

        self.ButtonsRegister = {
            "cd": {'function': 'choose_dino', 'filters': []},
            "cb": {'function': 'choose_bet', 'filters': []},
            "ns": {'function': 'next_stage', 'filters': []},
            "eg": {'function': 'end_game', 'filters': []},
        }

        self.ThreadsRegister['timer'] = {
            "repeat": 20, 
            "col_repeat": 'inf', "function": 'timer',
            "last_start": 0
        }

        self.WaiterRegister: dict = {
            "str": {'function': 'StrWaiter', 'active': False, 'data': {}},
            "int": {'function': 'IntWaiter', 'active': False, 'data': {}}
        }

        self.message_generators: dict = {
            'main': 'MainGenerator',
            'dino_choose': 'DinoChooseGenerator',
            'service': 'ServiceGenerator'
        }

        await self.Update()


    async def Custom_StartGame(self) -> None:
        self.users['main']['name'] = await user_name(self.user_id)
        await self.Update()

        await self.stage_edit('preparation')

    async def Custom_EndGame(self) -> None:
        self.D_log(f'Custom_EndGame {self.bet}', True)
        
        await take_coins(self.user_id, self.bet, True)

        if self.opponent:
            await take_coins(self.opponent, self.bet, True)

    # ======== MARKUP ======== #
    """ –ö–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é """

    async def MarkupGenerator(self):
        """ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é """
        data = []

        if self.stage == 'preparation':
            data = [{'Choose Dino': self.CallbackGenerator('choose_dino'),
                     'Choose Bet': self.CallbackGenerator('choose_bet'),
                     'End Game': self.CallbackGenerator('end_game')
                    }]

            if self.users['main']['dinosaur'] and self.bet:
                data.append({'Start Game': self.CallbackGenerator('next_stage')})

        if self.stage == 'friend_wait':
            data = [{'Enter': self.CallbackGenerator('friend_enter')},
                    {'End Game': self.CallbackGenerator('friend_cancel')}]

        return list_to_inline(data, 3)

    # ======== MESSAGE ======== #
    """ –ö–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—â–µ–Ω–∏—è –∏ –º–µ–Ω—é """

    async def MainGenerator(self) -> None:
        """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ """
        markup = await self.MarkupGenerator()
        text = ''

        if self.stage == 'preparation':
            dino_text = '–Ω–µ –≤—ã–±—Ä–∞–Ω'
            if self.users['main']['dinosaur']:
                dino = await Dino().create(self.users['main']['dinosaur'])
                dino_text = dino.name

            bet_text = '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'
            if self.bet: bet_text = self.bet

            text = f'–¢—É—Ç –∏–¥—ë—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã\n\nü¶ï –î–∏–Ω–æ–∑–∞–≤—Ä: {dino_text}\nüí∏ –°—Ç–∞–≤–∫–∞: {bet_text}'
        
        if self.stage == 'friend_wait':
            text = '–¢—É—Ç –∏–¥—ë—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã\n\n–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞'


        await self.MesageUpdate(text=text, reply_markup=markup)
    
    async def DinoChooseGenerator(self, user_id: int) -> None:
        """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ """
        user = await User().create(user_id)
        dinos = await user.get_dinos()
        dino_list = []
        for dino in dinos:
            dino_list.append({
                f'{dino.name}': 
                    self.CallbackGenerator('check_dino_choose', dino.alt_id)
                })
        dino_list.append({'Back': self.CallbackGenerator('back_to')})
        markup = list_to_inline(dino_list, 2)

        text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ (—Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∏–Ω–æ): \n\n'

        await self.MesageUpdate('main', text=text, reply_markup=markup)
    
    async def BetGenerator(self) -> None:
        """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ """
        text = f'–° –ø–æ–º–æ—â—å—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ –º–æ–Ω–µ—Ç–∞—Ö, –ª–∏–±–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /context {self.session_key} <–∑–Ω–∞—á–µ–Ω–∏–µ>\n\n–°—É–º–º–∞ –±—É–¥–µ—Ç —Å–Ω—è—Ç–∞ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.'
        
        markup = list_to_inline([{
            'Back': self.CallbackGenerator('back_to')}
                                 ], 2)
        await self.MesageUpdate('main', text=text, reply_markup=markup)
    
    async def ServiceGenerator(self, mtype: str) -> None:
        """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ """

        if mtype == 'no_coins':
            text = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.'
        elif mtype == 'zero':
            text = '–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤–æ–∏ÃÜ –∏–ª–∏ –º–µ–Ω—å—à–µ –Ω—É–ª—è.'

        await self.DeleteMessage('service')
        
        msg = await self.MesageUpdate('service', text=text)
        if isinstance(msg, types.Message):
            self.session_masseges['service'] = {'message_id': msg.message_id, 
                                            'last_action': time.time()}

    # ======== LOGIC ======== #
    """ –õ–æ–≥–∏–∫–∞ –º–∏–Ω–∏–∏–≥—Ä—ã """
    
    async def service_deleter(self):
        if 'service' not in self.session_masseges: return
        if 'last_action' not in self.session_masseges['service']: return

        if time.time() - self.session_masseges['service']['last_action'] >= 60:
            await self.DeleteMessage('service')

    async def timer(self):
        """ –ü–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç—ã —Ç–∞–∏ÃÜ–º–µ—Ä–∞ """
        if time.time() - self.LAST_ACTION >= self.time_wait:
            # await self.MessageGenerator('main')
            await self.EndGame()
        else:
            await self.Update()
            # await self.MessageGenerator('main')

    async def end_game_timer(self):
        if time.time() - self.LAST_ACTION >= self.time_wait: 
            await self.EndGame()
        await self.MainGenerator()

    # ======== BUTTONS ======== #
    """ –§—É–Ω–∫—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ """


    # ======== ContenWaiter ======== #
    async def StrWaiter(self, message: types.Message, command: bool = False):
        pass

    async def IntWaiter(self, message: types.Message, command: bool = False):
        pass

    # ======== FILTERS ======== #

    async def check_user(self, callback: types.CallbackQuery) -> bool:
        status = self.activ_user == 0 or callback.from_user.id == self.activ_user
        if not status:
            await callback.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ', True)
        return status


# PowerChecker().RegistryMe() # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
from ctypes import Union
from pyclbr import Function
from telebot.asyncio_handler_backends import State, StatesGroup

from bot.config import mongo_client, conf
from bot.const import GAME_SETTINGS as gs
from bot.exec import bot
from bot.modules.data_format import (chunks, filling_with_emptiness,
                                     list_to_inline)
from bot.modules.inline import item_info_markup
from bot.modules.items.item import (get_data, get_name, is_standart, item_code,
                              item_info)
from bot.modules.localization import get_data as get_loc_data
from bot.modules.localization import t
from bot.modules.logs import log
from bot.modules.markup import list_to_keyboard, down_menu
from bot.modules.markup import markups_menu as m
from bot.modules.user.user import get_inventory


from bot.modules.overwriting.DataCalsses import DBconstructor
users = DBconstructor(mongo_client.user.users)

back_button, forward_button = gs['back_button'], gs['forward_button']

class InventoryStates(StatesGroup):
    Inventory = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    InventorySearch = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    InventorySetFilters = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ

async def generate(items_data: dict, horizontal: int, vertical: int):
    items_names = list(items_data.keys())
    items_names.sort()

    # –°–æ–∑–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫, —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    pages = chunks(chunks(items_names, horizontal), vertical)

    # –î–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    pages = filling_with_emptiness(pages, horizontal, vertical)

    # –ù—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å—Ç—Ä–µ–ª–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å
    if horizontal < 3 and len(pages) > 1: horizontal = 3
    return pages, horizontal

def filter_items_data(items: dict, type_filter: list = [], 
                      item_filter: list = []):
    new_items = items.copy()

    for key, item in items.items():
        add_item = False
        data = get_data(item['item_id'])

        if not (type_filter or item_filter):
            # –§–∏–ª—å—Ç—Ä—ã –ø—É—Å—Ç—ã–µ
            add_item = True
        else:
            try:
                if data['type'] in type_filter: add_item = True
                if item['item_id'] in item_filter: add_item = True
            except: log(str(data), 2)

        # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        if not add_item: del new_items[key]

    return new_items

async def inventory_pages(items: list, lang: str = 'en', type_filter: list = [],
                    item_filter: list = []):
    """ –°–æ–∑–¥–∞—ë—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è

    type_filter - –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ–π —Ç–æ –æ—Ç–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∏—Ö —Ç–∏–ø—É
    item_filter - –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ–π —Ç–æ –æ—Ç–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ id
    !: –ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –µ—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É

    base_item: {
        item: {
            item_id: str
            abilities: dict (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
        },
        count: int
    }
    """
    items_data = {}

    code_items = {}
    for base_item in items:
        if 'item' in base_item:
            item = base_item['item'] # –°–∞–º –ø—Ä–µ–¥–º–µ—Ç
        else: item = base_item['items_data'] # –°–∞–º –ø—Ä–µ–¥–º–µ—Ç (–¥–ª—è –∑–∞–∫–∏–¥–∫–∏ —Ç—É–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã)

        data = get_data(item['item_id']) # –î–∞—Ç–∞ –∏–∑ json
        add_item = False

        # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ
        if data:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if not (type_filter or item_filter):
                # –§–∏–ª—å—Ç—Ä—ã –ø—É—Å—Ç—ã–µ
                add_item = True
            else:
                try:
                    if data['type'] in type_filter: add_item = True
                    if item['item_id'] in item_filter: add_item = True
                except: log(f'{data} inventory_pages', 2)

            # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
            if add_item:
                count = base_item['count']
                code = item_code(item)

                if code in code_items:
                    code_items[code]['count'] += count
                else:
                    code_items[code] = {'item': item, 'count': count}

    a = -1
    for code, data_item in code_items.items():
        item = data_item['item']
        count = data_item['count']
        name = get_name(item['item_id'], 
                        lang, item.get('abilities', {}))
        standart = is_standart(item)

        count_name = f' x{count}'
        if count == 1: count_name = ''

        end_name = name_end(item, standart, name, count_name)

        if end_name in items_data and items_data[end_name] != item:
            a =+ 1
            name += f' #{a}'
            end_name = name_end(item, standart, name, count_name)

        items_data[end_name] = item

    return items_data

def name_end(item, standart, name, count_name):
    if standart: 
        end_name = f"{name}{count_name}"
    else:
        code = item_code(item, False)
        end_name = f"{name} ({code}){count_name}"
    return end_name

async def send_item_info(item: dict, transmitted_data: dict, mark: bool=True):
    lang = transmitted_data['lang']
    chatid = transmitted_data['chatid']
    userid = transmitted_data['userid']
    dev = userid in conf.bot_devs

    text, image = await item_info(item, lang, dev)

    if mark: markup = item_info_markup(item, lang)
    else: markup = None

    if not image:
        await bot.send_message(chatid, text, 'Markdown',
                            reply_markup=markup)
    else:
        try:
            await bot.send_photo(chatid, image, text, 'Markdown', 
                            reply_markup=markup)
        except: 
             await bot.send_message(chatid, text,
                            reply_markup=markup)

async def swipe_page(userid: int, chatid: int):
    """ –ü–∞–Ω–µ–ª—å-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    """
    async with bot.retrieve_data(userid, chatid) as data:
        pages = data['pages']
        settings = data['settings']
        items = data['items']
        filters = data['filters']
        main_message = data['main_message']
        up_message = data['up_message']

    keyboard = list_to_keyboard(pages[settings['page']], settings['row'])

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–æ—á–∫–∏
    keyboard = down_menu(keyboard, len(pages) > 1, settings['lang'])

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ–Ω—é
    menu_text = t('inventory.menu', settings['lang'], 
                  page=settings['page']+1, col=len(pages))
    text = t('inventory.update_page', settings['lang'])
    buttons = {
        '‚èÆ': 'inventory_menu first_page', 'üîé': 'inventory_menu search', 
        '‚öôÔ∏è': 'inventory_menu filters', '‚è≠': 'inventory_menu end_page',
        '‚ôªÔ∏è': 'inventory_menu remessage'
        }

    if not settings['changing_filters']:
        del buttons['‚öôÔ∏è']
        del buttons['üîé']

    if 'delete_search' in settings and settings['delete_search']:
        try:
            del buttons['üîé']
        except: pass

    if filters:
        if settings['changing_filters'] and settings['changing_filters']:
            buttons['üóë'] = 'inventory_menu clear_filters'
            menu_text += t('inventory.clear_filters', settings['lang'])

    if items and settings['changing_filters']:
        buttons['‚ùåüîé'] = 'inventory_menu clear_search'


    inl_menu = list_to_inline([buttons], 4)
    if main_message == 0:
        new_main = await bot.send_message(chatid, menu_text, reply_markup=inl_menu, parse_mode='Markdown')
        async with bot.retrieve_data(userid, chatid) as data:
            if data:
                data['main_message'] = new_main.message_id
    else:
        await bot.edit_message_text(menu_text, chatid, main_message, reply_markup=inl_menu, parse_mode='Markdown')

    if up_message == 0:
        new_up = await bot.send_message(chatid, text, reply_markup=keyboard)
    else:
        new_up = await bot.send_message(chatid, text, reply_markup=keyboard)
        await bot.delete_message(chatid, up_message)

    async with bot.retrieve_data(userid, chatid) as data:
        data['up_message'] = new_up.message_id


async def search_menu(userid: int, chatid: int):
    """ –ü–∞–Ω–µ–ª—å-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    """
    async with bot.retrieve_data(userid, chatid) as data:
        settings = data['settings']
        main_message = data['main_message']
        up_message = data['up_message']

    menu_text = t('inventory.search', settings['lang'])
    buttons = {'‚ùå': 'inventory_search close'}
    inl_menu = list_to_inline([buttons])

    text = t('inventory.update_search', settings['lang'])
    keyboard = list_to_keyboard([ t('buttons_name.cancel', settings['lang']) ])
    
    if up_message == 0:
        await bot.send_message(chatid, text, reply_markup=keyboard)
    else:
        new_up = await bot.send_message(chatid, text, reply_markup=keyboard)
        await bot.delete_message(chatid, up_message)
        async with bot.retrieve_data(userid, chatid) as data:
            data['up_message'] = new_up.message_id
    
    if main_message == 0:
        new_main = await bot.send_message(chatid, menu_text, reply_markup=inl_menu, parse_mode='Markdown')
        async with bot.retrieve_data(userid, chatid) as data:
            data['main_message'] = new_main.message_id
    else:
        await bot.edit_message_text(menu_text, chatid, main_message, reply_markup=inl_menu, parse_mode='Markdown')
    
async def filter_menu(userid: int, chatid: int, upd_up_m: bool = True):
    """ –ü–∞–Ω–µ–ª—å-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    """
    async with bot.retrieve_data(userid, chatid) as data:
        settings = data['settings']
        filters = data['filters']
        main_message = data['main_message']
        up_message = data['up_message']

    menu_text = t('inventory.choice_filter', settings['lang'])
    filters_data = get_loc_data('inventory.filters_data', settings['lang'])
    buttons = {}
    for key, item in filters_data.items():
        name = item['name']
        if list(set(filters) & set(item['keys'])):
            name = "‚úÖ" + name

        buttons[name] = f'inventory_filter filter {key}'

    cancel = {'‚úÖ': 'inventory_filter close'}
    inl_menu = list_to_inline([buttons, cancel])

    text = t('inventory.update_filter', settings['lang'])
    keyboard = list_to_keyboard([ t('buttons_name.cancel', settings['lang']) ])

    if upd_up_m:
        if up_message == 0:
            await bot.send_message(chatid, text, reply_markup=keyboard)
        else:
            new_up = await bot.send_message(chatid, text, reply_markup=keyboard)
            await bot.delete_message(chatid, up_message)
            async with bot.retrieve_data(userid, chatid) as data:
                data['up_message'] = new_up.message_id
    
    if main_message == 0:
        new_main = await bot.send_message(chatid, menu_text, reply_markup=inl_menu, parse_mode='Markdown')
        async with bot.retrieve_data(userid, chatid) as data:
            data['main_message'] = new_main.message_id
    else:
        await bot.edit_message_text(menu_text, chatid, main_message, reply_markup=inl_menu, parse_mode='Markdown')

    # if 'edited_message' in settings and settings['edited_message']:
    #     try:
    #         await bot.edit_message_text(menu_text, chatid, settings['edited_message'], reply_markup=inl_menu, parse_mode='Markdown')
    #     except: pass
    # else:
    #     await bot.send_message(chatid, text, reply_markup=keyboard)
    #     msg = await bot.send_message(chatid, menu_text, 
    #                         parse_mode='Markdown', reply_markup=inl_menu)
        
    #     async with bot.retrieve_data(
    #         userid, chatid) as data: data['settings']['edited_message'] = msg.id

async def start_inv(function, userid: int, chatid: int, lang: str, 
                    type_filter: list = [], item_filter: list = [], 
                    exclude_ids: list = [],
                    start_page: int = 0, changing_filters: bool = True,
                    inventory: list = [], delete_search: bool = False,
                    transmitted_data = None,

                    inline_func = None, inline_code = ''
                    ):
    """ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        type_filter - —Ñ–∏–ª—å—Ç—Ä —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        item_filter - —Ñ–∏–ª—å—Ç—Ä –ø–æ id –ø—Ä–µ–¥–º–µ—Ç–∞–º
        start_page - —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        exclude_ids - –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ id
        changing_filters - —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        one_time_pages - —Å–∫–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ —Ä–∞–∑, –≤—Å–µ –µ—Å–ª–∏ 0
        delete_search - –£–±—Ä–∞—Ç—å –ø–æ–∏—Å–∫
        inventory - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∏–Ω—É—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å, –µ—Å–ª–∏ –ø—É—Å—Ç–æ - —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å


        >> –°–æ–∑–¥–∞–Ω–æ –¥–ª—è steps, –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
        –Ω–∞ inline_func, –∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è –Ω–∞ inventoryinline {inline_code}
        –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ –∫–Ω–æ–ø–∫–µ –≤ function

        >> –í inline_func —Ç–∞–∫ –∂–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è inline_code –≤ transmitted_data

        inline_func - –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–±–µ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ 
            - –í—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "inventoryinline {inline_code}" 
    """
    if not transmitted_data: transmitted_data = {}
    count = 0

    if 'userid' not in transmitted_data: transmitted_data['userid'] = userid
    if 'chatid' not in transmitted_data: transmitted_data['chatid'] = chatid
    if 'lang' not in transmitted_data: transmitted_data['lang'] = lang

    user_settings = await users.find_one({'userid': userid}, {'settings': 1}, comment='start_inv_user_settings')
    if user_settings: inv_view = user_settings['settings']['inv_view']
    else: inv_view = [2, 3]

    if not inventory:
        inventory, count = await get_inventory(userid, exclude_ids)
    items_data = await inventory_pages(inventory, lang, type_filter, item_filter)
    pages, row = await generate(items_data, *inv_view)

    if not pages:
        await bot.send_message(chatid, t('inventory.null', lang), 
                           reply_markup=await m(chatid, 'last_menu', language_code=lang))
        return False, 'cancel'
    else:
        try:
            async with bot.retrieve_data(userid, chatid) as data:
                old_function = data['function']
                old_transmitted_data = data['transmitted_data']

            if old_function: function = old_function
            if old_transmitted_data: transmitted_data = old_transmitted_data
        except: 
            # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–¥–º–µ—Ç–µ
            if function is None: function = send_item_info

        await bot.set_state(userid, InventoryStates.Inventory, chatid)
        async with bot.retrieve_data(userid, chatid) as data:
            data['pages'] = pages
            data['items_data'] = items_data
            data['filters'] = type_filter
            data['items'] = item_filter

            data['settings'] = {'view': inv_view, 'lang': lang, 
                                'row': row, 'page': start_page,
                                'changing_filters': changing_filters,
                                'delete_search': delete_search
                                }
            data['main_message'] = 0
            data['up_message'] = 0

            data['function'] = function
            data['transmitted_data'] = transmitted_data

        if inline_func is not None:
            async with bot.retrieve_data(userid, chatid) as data:
                data['settings']['inline_func'] = inline_func
                data['settings']['inline_code'] = inline_code

        log(f'open inventory userid {userid} count {count}')

        await swipe_page(userid, chatid)
        return True, 'inv'

async def open_inv(userid: int, chatid: int):
    """ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    """
    await bot.set_state(userid, InventoryStates.Inventory, chatid)
    await swipe_page(userid, chatid)



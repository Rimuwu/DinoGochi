import random
from random import choice, randint, random, uniform

from bot.config import conf, mongo_client
from bot.modules.data_format import transform
from bot.modules.dinosaur.dinosaur  import check_status, mutate_dino_stat
from bot.modules.localization import get_data, get_lang, t
from bot.taskmanager import add_task
from bot.modules.dinosaur.dinosaur  import Dino, get_owner
from bot.modules.dinosaur.mood import check_inspiration, mood_while_if, calculation_points
from bot.modules.user.user import experience_enhancement
from bot.exec import bot
from bot.modules.user.user import User

from bot.modules.overwriting.DataCalsses import DBconstructor
dinosaurs = DBconstructor(mongo_client.dinosaur.dinosaurs)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–∞—Ä—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
HEAL_CHANGE = 1, 2
EAT_CHANGE = 1, 2
GAME_CHANGE = 1, 2
ENERGY_CHANGE = 1, 2
MOOD_CHANGE = 1, 2

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–æ–≤
CRITICAL_ENERGY = 10
CRITICAL_EAT = 20
HIGH_EAT = 80
LOW_EAT = 20
HIGH_MOOD = 50

REPEAT_MINUTS = 4

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
P_HEAL = 0.03 * REPEAT_MINUTS
P_EAT = 0.045 * REPEAT_MINUTS
P_EAT_SLEEP = 0.035 * REPEAT_MINUTS
P_GAME = 0.1 * REPEAT_MINUTS
P_ENERGY = 0.05 * REPEAT_MINUTS
P_MOOD = 0.2 * REPEAT_MINUTS
P_HEAL_EAT = 0.1 * REPEAT_MINUTS
EVENT_CHANCE = 0.05 * REPEAT_MINUTS

async def main_checks():
    """–ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤
    """

    dinos: list[dict] = await dinosaurs.find({}, comment='main_checks_dinos')
    for dino in dinos:
        r = 0

        status = await check_status(dino['_id'])
        if status == 'inactive': continue
        is_sleeping = status == 'sleep'
        skill_activ = status in ['gym', 'library', 'swimming_pool', 'park']

        if dino['stats']['heal'] <= 0:
            dino_cl = await Dino().create(dino['_id'])
            await dino_cl.dead()
            continue

        if status == 'kindergarten':
            if uniform(0, 1) <= P_EAT_SLEEP:
                r = await mutate_dino_stat(dino, 'eat', randint(*EAT_CHANGE))

            if uniform(0, 1) <= P_GAME:
                r = await mutate_dino_stat(dino, 'game', randint(*GAME_CHANGE))

            if uniform(0, 1) <= P_ENERGY:
                r = await mutate_dino_stat(dino, 'energy', randint(*ENERGY_CHANGE))

        else:
            # –ü–æ–Ω–∏–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
            # –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –µ–¥–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ
            if dino['stats']['energy'] <= CRITICAL_ENERGY and uniform(0, 1) <= P_HEAL:
                r = await mutate_dino_stat(dino, 'heal', -1)

            elif dino['stats']['eat'] <= CRITICAL_EAT and uniform(0, 1) <= P_HEAL:
                r = await mutate_dino_stat(dino, 'heal', -1)

            elif is_sleeping and randint(0, 1):
                r = await mutate_dino_stat(dino, 'heal', 1)

            # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –µ–¥—ã
            # –µ—Å–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä —Å–ø–∏—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å P_EAT_SLEEP
            # –µ—Å–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ —Å–ø–∏—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å P_EAT
            if (uniform(0, 1) <= P_EAT_SLEEP and is_sleeping) or (uniform(0, 1) <= P_EAT and not is_sleeping):
                r = await mutate_dino_stat(dino, 'eat', randint(*EAT_CHANGE)*-1)

            # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏, –µ—Å–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ –∏–≥—Ä–∞–µ—Ç
            if status != 'game' and uniform(0, 1) <= P_GAME:
                r = await mutate_dino_stat(dino, 'game', randint(*GAME_CHANGE)*-1)

            # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
            # –µ—Å–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ —Å–ø–∏—Ç
            if not(is_sleeping) and (uniform(0, 1) <= P_ENERGY):
                r = await mutate_dino_stat(dino, 'energy', randint(*ENERGY_CHANGE)*-1)


            # –í–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –µ–¥—ã –∏ —ç–Ω–µ—Ä–≥–∏–∏
            if skill_activ and (uniform(0, 1) <= P_ENERGY):
                r = await mutate_dino_stat(dino, 'energy', -1)

            elif skill_activ and (uniform(0, 1) <= P_EAT):
                r = await mutate_dino_stat(dino, 'eat', -1)

            if randint(1, 5) == 5:
                owner = await get_owner(dino['_id'])
                if owner:
                    if await check_inspiration(dino['_id'], 'exp_boost'):
                        await experience_enhancement(owner['owner_id'], randint(1, 4))
                    else:
                        await experience_enhancement(owner['owner_id'], randint(1, 2))

        # —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–∏—Ç–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
        # –µ—Å–ª–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä –Ω–µ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ–¥, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–ø–∞—Å–µ —ç–Ω–µ—Ä–≥–∏–∏, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        if dino['stats']['eat'] > HIGH_EAT and dino['stats']['energy'] > 50:
            if uniform(0, 1) <= P_HEAL_EAT:

                r = await mutate_dino_stat(dino, 'heal', randint(1, 2))
                if randint(0, 1): 
                    r = await mutate_dino_stat(dino, 'eat', -1)

        # =================== –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ========================== #

        # –ï—Å–ª–∏ –∏–≥—Ä—ã –º–µ–Ω—å—à–µ 14, —Ç–æ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        # –ù–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞–ª–æ–∂–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç -1 –ø–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –¥–æ 35
        if dino['stats']['game'] <= 15:
            if uniform(0, 1) <= P_MOOD:
                await mood_while_if(dino['_id'], 'little_game', 'game', -1, 35, -1)

        # –ï—Å–ª–∏ –∏–≥—Ä—ã –±–æ–ª—å—à–µ 84, —Ç–æ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç +1
        # –î–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ —É–ø–∞–¥—ë—Ç –¥–æ 45
        elif dino['stats']['game'] >= 85:
            if uniform(0, 1) <= P_MOOD:
                await mood_while_if(dino['_id'], 'multi_games', 'game', 45, 101, 1)


        # –ï—Å–ª–∏ –µ–¥—ã –º–µ–Ω—å—à–µ —á–µ–º LOW_EAT, —Ç–æ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç -1 –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
        if dino['stats']['eat'] <= LOW_EAT and dino['stats']['eat'] >= 5:
            if uniform(0, 1) <= P_MOOD:
                await mood_while_if(dino['_id'], 'little_eat', 'eat', 5, 50, -1)

        # –ï—Å–ª–∏ –µ–¥—ã –º–µ–Ω—å—à–µ —á–µ–º 5, —Ç–æ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç -2 –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
        elif dino['stats']['eat'] < 5:
            if uniform(0, 1) <= P_MOOD:
                await mood_while_if(dino['_id'], 'little_eat', 'eat', -1, 20, -2)

        # –ï—Å–ª–∏ –µ–¥—ã —É –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –±–æ–ª—å—à–µ 84 —Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é +1 –ø–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ 60-—Ç–∏
        elif dino['stats']['eat'] >= 85:
            if uniform(0, 1) <= P_MOOD:
                await mood_while_if(dino['_id'], 'multi_eat', 'eat', 60, 101, 1)


        # –ï—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏–∏ –º–µ–Ω—å—à–µ 21-—Ç–∏, –ø–æ–Ω–∏–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ -1
        if dino['stats']['energy'] <= 20:
            if uniform(0, 1) <= P_MOOD:
                await mood_while_if(dino['_id'], 'little_energy', 
                              'energy', -1, 40, -1)

        # –ï—Å–ª–∏ —É –¥–∏–Ω–æ–∑–∞–≤—Ä–∞ –º–Ω–æ–≥–æ —ç–Ω–µ—Ä–≥–∏–∏ —Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ +1
        elif dino['stats']['energy'] >= 85:
            if uniform(0, 1) <= P_MOOD:
                await mood_while_if(dino['_id'], 'multi_energy', 
                              'energy', 60, 101, 1)


        # –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–Ω—å—à–µ 21 —Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ -1
        if dino['stats']['heal'] <= 20:
            if uniform(0, 1) <= P_MOOD:
                await mood_while_if(dino['_id'], 'little_heal', 'heal', -1, 40, -1)

        elif dino['stats']['heal'] >= 85:
            if uniform(0, 1) <= P_MOOD:
                await mood_while_if(dino['_id'], 'multi_heal', 'heal', 60, 101, 1)

        if status not in ['kindergarten', 'sleep']:
            if dino['stats']['mood'] >= 95:
                if randint(0, 5) == 3:
                    await calculation_points(dino, 'inspiration')
            elif dino['stats']['mood'] <= 5:
                if randint(0, 5) == 3:
                    await calculation_points(dino, 'breakdown')

        # ========== –ú—ã—Å–ª–∏ –≤—Å–ª—É—Ö ========== # 
        if status == 'pass' and r == 0:
            chance = round(random(), 2) + transform(dino['stats']['charisma'], 20, 10) // 100
            if chance <= 0.05: # –®–∞–Ω—Å 5 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                owner = await get_owner(dino['_id'])

                if owner:
                    user = await User().create(owner['owner_id'])
                    if 'no_talk' in user.settings and user.settings['no_talk']:
                        continue

                    lang = await get_lang(owner['owner_id'])
                    state = await bot.get_state(user.userid, user.userid)

                    if state == None:
                        if not user.settings.get('my_name', False):
                            owner_name = t('owner', lang)
                        else: owner_name = user.settings['my_name']

                        text = choice(get_data('pass_messages', lang))
                        text = text.format(owner=owner_name)
                        try:
                            await bot.send_message(
                                owner['owner_id'], f'ü¶ï {dino["name"]}: {text}'
                            )
                        except: pass

if __name__ != '__main__':
    if conf.active_tasks:
        add_task(main_checks, REPEAT_MINUTS * 60.0, 5.0)
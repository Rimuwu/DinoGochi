import json
import random
import os
import emoji
from pprint import pprint

import translators
from langdetect import DetectorFactory, detect, detect_langs
import re

DetectorFactory.seed = 0
ex = os.path.dirname(__file__) # –ü—É—Ç—å –∫ —ç—Ç–æ–º—É —Ñ–∞–π–ª—É
langs_path = "/langs"
damp_path = "/damp_test"

base_names = {}
cash_replaces = {}

with open(f'{ex}/settings.json', encoding='utf-8') as f: 
    """ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞–π—Å—Ç—Ä–æ–µ–∫ """
    settings = json.load(f) # type: dict

    replace_codes = settings['replace_codes']
    replace_words = settings['replace_words']
    one_replace_s = settings['one_replace_s']
    translators_names = settings['translators']

    main_code = settings['main_code']
    # langs_path = settings['langs_path']
    # damp_path = settings['damp_path']

    zero_translator = settings['zero_translator']
    ignore_translate_keys = settings['ignore_translate_keys']
    sp_sym = settings['sp_sym']

# --- –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ user_agents –∏ proxies ---
user_agents = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ user-agent –ø–æ –∂–µ–ª–∞–Ω–∏—é
]
proxies = [

    # –ü—Ä–∏–º–µ—Ä: 'http://user:pass@proxy_ip:port',
    # 'http://proxy_ip:port',
    # –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–æ–∫—Å–∏, –ª–∏–±–æ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏
]

# --- –ù–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ —Å—Ö–µ–º–µ ---

def walk_keys(data, callback, path=""):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç —Å–ª–æ–≤–∞—Ä—å/—Å–ø–∏—Å–æ–∫ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç callback –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
    path ‚Äî –ø—É—Ç—å –¥–æ –∫–ª—é—á–∞ (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É)
    """
    if isinstance(data, dict):
        for k, v in data.items():
            new_path = f"{path}.{k}" if path else k
            walk_keys(v, callback, new_path)
    elif isinstance(data, list):
        for idx, v in enumerate(data):
            new_path = f"{path}.{idx}" if path else str(idx)
            walk_keys(v, callback, new_path)
    else:
        callback(path, data)


def build_structure(data):
    """
    –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–º–ø–∞: –≤—Å–µ –Ω–µ-—Å–ª–æ–≤–∞—Ä–Ω—ã–µ/–Ω–µ-—Å–ø–∏—Å–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–º–µ–Ω—è–µ—Ç –Ω–∞ 'NOTEXT'.
    """
    if isinstance(data, dict):
        return {k: build_structure(v) for k, v in data.items()}
    elif isinstance(data, list):
        return [build_structure(v) for v in data]
    else:
        return 'NOTEXT'


def compare_structures(base, damp, path=""):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É base (–∏—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å) –∏ damp (–¥–∞–º–ø –ø–µ—Ä–µ–≤–æ–¥–∞).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ (–µ—Å—Ç—å –≤ base, –Ω–µ—Ç –≤ damp)
      - –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ (–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞—é—Ç—Å—è)
      - —É–¥–∞–ª—ë–Ω–Ω—ã–µ (–µ—Å—Ç—å –≤ damp, –Ω–µ—Ç –≤ base)
    """
    new_keys, changed_keys, deleted_keys = [], [], []
    if isinstance(base, dict):
        base_keys = set(base.keys())
        damp_keys = set(damp.keys()) if isinstance(damp, dict) else set()

        for k in base_keys:
            new_path = f"{path}.{k}" if path else k
            if k not in damp_keys:
                new_keys.append(new_path)
            else:
                n, c, d = compare_structures(base[k], damp[k], new_path)
                new_keys += n
                changed_keys += c
                deleted_keys += d

        for k in damp_keys - base_keys:
            new_path = f"{path}.{k}" if path else k
            deleted_keys.append(new_path)

    elif isinstance(base, list) and isinstance(damp, list):
        for idx, v in enumerate(base):
            new_path = f"{path}.{idx}" if path else str(idx)

            if idx >= len(damp):
                new_keys.append(new_path)
            else:
                n, c, d = compare_structures(v, damp[idx], new_path)
                new_keys += n
                changed_keys += c
                deleted_keys += d

        for idx in range(len(base), len(damp)):
            new_path = f"{path}.{idx}" if path else str(idx)
            deleted_keys.append(new_path)
    else:
        if base != damp:
            changed_keys.append(path)
    return new_keys, changed_keys, deleted_keys

def save_replace(code: int, text: str, translate: bool):
    global cash_replaces
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–º–µ–Ω—É –≤ —Å–ª–æ–≤–∞—Ä–µ cash_replaces.
    """
    if code not in cash_replaces:
        cash_replaces[code] = {"text": text, 
                               "translate": translate}
        return code
    else:
        return save_replace(code + 1, text, translate)

def replace_specials(text):
    # "(121)": {"text": "_", "translate": false},
    # "(801)": {"text": "</code>", "translate": false},
    #     "(800)": {"text": "<code>", "translate": false},
    #     "(901)": {"text": "<i>", "translate": false},
    #     "(900)": {"text": "</i>", "translate": false},
    #     "(700)": {"text": "<b>", "translate": false},
    #     "(701)": {"text": "</b>", "translate": false}
    """
    –ó–∞–º–µ–Ω—è–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏ –Ω–∞ –∫–æ–¥—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.
    """
    if not isinstance(text, str):
        return text
    
    for _ in range(6):
        # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        for key, item in replace_words.items():
            text = text.replace(item['text'], key)

        # –ü—Ä—è—á–µ–º —ç–º–æ–¥–∑–∏
        for em in emoji.emoji_list(text):
            code = save_replace(int(ord(em['emoji'][0])), 
                                em['emoji'], False)
            text_code = f"{sp_sym}{code}{sp_sym}"
            text = text.replace(em['emoji'], text_code)

        # –ü—Ä—è—á–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∞ {name}
        matches = re.findall(r'\{.*?\}', text)
        for match in matches:
            code = save_replace(int(ord(match[1])), 
                                match, False)
            text_code = f"{sp_sym}{code}{sp_sym}"
            text = text.replace(match, text_code)
        
        # –ü—Ä—è—á–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∞ /—Å–ª–æ–≤–æ
        matches = re.findall(r'\/[^\/]+', text)
        for match in matches:
            code = save_replace(int(ord(match[1])), 
                                match, False)
            text_code = f"{sp_sym}{code}{sp_sym}"
            text = text.replace(match, text_code)
        
        # –ü—Ä—è—á–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∞ <b>word</b>
        matches = re.findall(r'<\s*[^<>]+\s*>', text)
        for match in matches:
            code = save_replace(int(ord(match[1])),
                    match, True)
            text_code = f"{sp_sym}{code}{sp_sym}"
            text = text.replace(match, text_code)

        # –ü—Ä—è—á–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–∞ *–°–ª–æ–≤–æ*
        for one_repl in one_replace_s:
            tx = fr'\{one_repl}\s*.*?\s*\{one_repl}'
            matches = re.findall(tx, text)
            for match in matches:
                code = save_replace(int(ord(match[1])),
                                    match, True)
                text_code = f"{sp_sym}{code}{sp_sym}"
                text = text.replace(match, text_code)

    return text


def restore_specials(text, to_lang):
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞.
    """
    if not isinstance(text, str):
        return text

    for key, item in replace_words.items():
        text = item['text']
        if item['translate']:
            text = translate_text(item['text'], to_lang)
        text = text.replace(key, text)

    for code, item in cash_replaces.items():
        text = item['text']
        if item['translate']:
            text = translate_text(item['text'], to_lang)

        text = text.replace(f"{sp_sym}{code}{sp_sym}", 
                            text)

    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ (–ø—Ä–∏–º–µ—Ä: #128512# -> üòÄ)
    # (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—é —ç–º–æ–¥–∑–∏)
    return text


def translate_text(text, to_lang, trans=zero_translator):
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç, –∑–∞—â–∏—â–∞—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏.
    """
    if not isinstance(text, str) or not text.strip():
        return text
    safe_text = replace_specials(text)

    try:
        lang = detect(safe_text)
        langs = detect_langs(safe_text)
    except Exception as e:
        lang = None
        langs = []

    if lang in ['en', 'it'] and len(langs) == 1:
        translated = safe_text
        print(f"–ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º: {text} - {lang}")

    elif lang:
        try:
            translated = translators.translate_text(safe_text, from_language=main_code, to_language=to_lang, translator=trans)
            print(safe_text, '->', translated, '\n', lang, '->', to_lang)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {text} - {str(e)}")
            translated = safe_text

    else:
        translated = safe_text
        print(f"–ù–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ -> {text}")
    return restore_specials(translated, to_lang)


def read_json(path):
    if not os.path.exists(path):
        return {}
    with open(path, encoding='utf-8') as f:
        return json.load(f)

def write_json(path, data):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


def set_by_path(dct, path, value):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ –≤–∏–¥–∞ 'a.b.0.c' –≤ —Å–ª–æ–≤–∞—Ä–µ/—Å–ø–∏—Å–∫–µ.
    """
    keys = path.split('.')
    cur = dct

    for k in keys[:-1]:
        if k.isdigit():
            k = int(k)
            while len(cur) <= k:
                cur.append({})
            cur = cur[k]
        else:
            if k not in cur:
                cur[k] = {}
            cur = cur[k]

    last = keys[-1]
    if last.isdigit():
        last = int(last)
        while len(cur) <= last:
            cur.append(None)
        cur[last] = value
    else:
        cur[last] = value


def del_by_path(dct, path):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ –≤–∏–¥–∞ 'a.b.0.c' –≤ —Å–ª–æ–≤–∞—Ä–µ/—Å–ø–∏—Å–∫–µ.
    """
    keys = path.split('.')
    cur = dct
    for k in keys[:-1]:
        if k.isdigit():
            k = int(k)
            cur = cur[k]
        else:
            cur = cur[k]

    last = keys[-1]
    if last.isdigit():
        last = int(last)
        del cur[last]
    else:
        del cur[last]


def main():
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    main_lang_path = f"{ex}{langs_path}/{main_code}.json"
    main_data = read_json(main_lang_path).get(main_code, {})

    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    langs_dir = ex + langs_path
    lang_files = [f for f in os.listdir(langs_dir) if f.endswith('.json')]
    lang_codes = [f.replace('.json', '') for f in lang_files if f.replace('.json', '') != main_code]
    print(f"–Ø–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {lang_codes}")

    for lang in lang_codes:
        print(f"\n=== –ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è {lang} ===")
        lang_path = f"{ex}{langs_path}/{lang}.json"
        damp_path_ = f"{ex}{damp_path}/{lang}.json"

        lang_data = read_json(lang_path).get(lang, {})
        damp_data = read_json(damp_path_)

        # 3. –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–º–ø–∞
        main_struct = build_structure(main_data)
        if not damp_data:
            damp_data = {lang: main_struct}
            write_json(damp_path_, damp_data)

        # 4. –°—Ä–∞–≤–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        new_keys, changed_keys, deleted_keys = compare_structures(main_data, damp_data[lang])

        print(f'–ù–æ–≤—ã–µ –∫–ª—é—á–∏: {new_keys}')
        print(f'–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏: {changed_keys}')
        print(f'–£–¥–∞–ª—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏: {deleted_keys}')

        # 5. –£–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ –∫–ª—é—á–∏
        for key in deleted_keys:
            del_by_path(lang_data, key)
            del_by_path(damp_data[lang], key)

        if new_keys or changed_keys:
            print(f'\n–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–≤–æ–¥–∞...')

            # 6. –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ/–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏
            def update_callback(path, value):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ path —Å –ª—é–±–æ–≥–æ –∏–∑ new_keys –∏–ª–∏ changed_keys
                def is_prefix_in_keys(keys, path):
                    for key in keys:
                        if path == key or path.startswith(f"{key}."):
                            return True
                    return False

                if is_prefix_in_keys(new_keys, path) or is_prefix_in_keys(changed_keys, path):
                    if isinstance(value, str):
                        path_set = set(path.split('.'))
                        ignore_set = set(ignore_translate_keys)

                        if path_set & ignore_set:
                            translated = value  # –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                            print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {path}: {value}")
                        else:
                            translated = translate_text(value, lang)

                        set_by_path(lang_data, path, translated)
                        set_by_path(damp_data, path, value)
                    else:
                        set_by_path(lang_data, path, value)
                        set_by_path(damp_data, path, value)
            walk_keys(main_data, update_callback)

        # 7. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        write_json(lang_path, {lang: lang_data})
        write_json(damp_path_, {lang: main_data})

if __name__ == '__main__':
    main()

from heapq import heappush, heappop

cells = [[3, 2], [4, 2], [3, 3], [4, 3], [2, 4], [3, 4], [4, 4], [5, 4], [6, 4], [8, 4], [9, 4], [10, 4], [11, 4], [12, 4], [13, 4], [14, 4], [2, 5], [3, 5], [4, 5], [5, 5], [6, 5], [7, 5], [8, 5], [9, 5], [10, 5], [11, 5], [12, 5], [13, 5], [14, 5], [15, 5], [4, 6], [5, 6], [6, 6], [7, 6], [8, 6], [9, 6], [10, 6], [11, 6], [12, 6], [13, 6], [14, 6], [15, 6], [16, 6], [17, 6], [7, 7], [8, 7], [9, 7], [10, 7], [13, 7], [14, 7], [15, 7], [16, 7], [17, 7], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [16, 8], [8, 9], [9, 9], [10, 9], [15, 9], [8, 10]]

def get_weight(x, y, direction):
    key = f"{x}.{y}"
    if key in weight_map:
        w = weight_map[key][direction]
        if w == -1:
            return None
        return w
    return 1

def neighbors(cell):
    x, y = cell
    dirs = [(-1, 0), (0, -1), (1, 0), (0, 1)]  # left, up, right, down
    for i, (dx, dy) in enumerate(dirs):
        nx, ny = x + dx, y + dy
        if [nx, ny] in cells:
            # direction_from = (i + 2) % 4: 0<->2, 1<->3
            direction_from = (i + 2) % 4
            w = get_weight(nx, ny, direction_from)
            if w is not None:
                yield (nx, ny), w

def find_fastest_path(start, goal):
    open_set = []
    heappush(open_set, (0, tuple(start), [start]))
    visited = {}

    while open_set:
        cost, current, path = heappop(open_set)
        if list(current) == goal:
            return path
        if current in visited and visited[current] <= cost:
            continue
        visited[current] = cost
        for (nx, ny), w in neighbors(current):
            next_cell = (nx, ny)
            if next_cell not in visited or cost + w < visited[next_cell]:
                heappush(open_set, (cost + w, next_cell, path + [[nx, ny]]))
    return None

weight_map = {
    "3.2": [1, 1, 1, 1],
    "4.2": [1, 1, 1, 1],
    "3.3": [1, 1, 1, 1],
    "4.3": [1, 1, 1, 1],
    "2.4": [1, 1, 1, 1],
    "3.4": [1, 1, 1, 1],
    "4.4": [1, 1, 1, 1],
    "5.4": [1, 1, 3, 1],
    "6.4": [3, 1, 1, 1],
    "8.4": [1, 1, 1, 1],
    "9.4": [1, 1, 1, -1],
    "10.4": [1, 1, 1, -1],
    "11.4": [1, 1, 1, -1],
    "12.4": [1, 1, 1, 1],
    "13.4": [1, 1, 1, -1],
    "14.4": [1, 1, 1, -1],
    "2.5": [1, 1, 1, 1],
    "3.5": [1, 1, 1, 1],
    "4.5": [1, 1, 1, 1],
    "5.5": [1, 1, 1, 1],
    "6.5": [2, 1, 1, 2],
    "7.5": [3, 3, 3, 3],
    "8.5": [2, 2, 2, 2],
    "9.5": [1, 1, 1, 1],
    "10.5": [1, 1, 1, 1],
    "11.5": [1, 1, 1, 1],
    "12.5": [1, 1, -1, 1],
    "13.5": [-1, -1, 1, -1],
    "14.5": [1, -1, -1, 1],
    "15.5": [-1, 1, 1, 1],
    "4.6": [1, 1, 1, 1],
    "5.6": [1, 1, 1, 1],
    "6.6": [1, 3, 1, 1],
    "7.6": [1, 1, 1, 1],
    "8.6": [1, 1, 1, 1],
    "9.6": [1, 1, 1, 1],
    "10.6": [1, 1, 1, -1],
    "11.6": [1, 1, 1, -1],
    "12.6": [1, 1, 1, -1],
    "13.6": [1, -1, 1, 1],
    "14.6": [1, 1, 1, 1],
    "15.6": [1, 1, 1, 1],
    "16.6": [1, 1, 1, -1],
    "17.6": [1, 1, 1, 1],
    "7.7": [1, 2, 2, 1],
    "8.7": [1, 1, 1, 1],
    "9.7": [1, 1, 1, 1],
    "10.7": [1, -1, -1, 1],
    "13.7": [-1, 1, 1, 1],
    "14.7": [1, 1, 1, 1],
    "15.7": [1, 1, 1, 1],
    "16.7": [1, -1, 1, 1],
    "17.7": [1, 1, 1, 1],
    "8.8": [1, 1, 1, 2],
    "9.8": [1, 1, 1, 1],
    "10.8": [1, 1, 1, 2],
    "11.8": [1, -1, -1, 1],
    "12.8": [-1, -1, 1, 1],
    "13.8": [1, 1, 1, 1],
    "14.8": [1, 1, -1, 1],
    "15.8": [-1, 1, 1, 1],
    "16.8": [1, 1, 1, 1],
    "8.9": [1, 2, 1, 1],
    "9.9": [1, 1, 2, 1],
    "10.9": [2, 2, 1, 1],
    "15.9": [1, 1, 1, 1],
    "8.10": [1, 1, 1, 1],
}

if __name__ == "__main__":
    start = [5, 5]
    goal = [7, 5]
    path = find_fastest_path(start, goal)
    if path:
        print("Fastest path found:")
        for step in path:
            print(step)
    else:
        print("No path found.")
    
    print(len(cells))